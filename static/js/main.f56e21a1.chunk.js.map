{"version":3,"sources":["near/config.js","near/utils.js","App.js","pages/play.js","index.js"],"names":["CONTRACT_NAME","process","environment","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","explorerUrl","Error","nearEnv","connect","Object","assign","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","near","window","walletConnection","WalletConnection","accountId","getAccountId","Contract","account","viewMethods","changeMethods","contract","get_num","args","count","increment","reset","logout","signOut","location","reload","login","requestSignIn","accountBalance","formatNearAmount","getAccountBalance","total","App","useState","balance","setBalance","visible","setVisible","navigate","useNavigate","useEffect","console","log","getBalance","className","alt","src","width","onClick","state","style","visibility","type","showWalletInfo","Play","time","setTime","gameOver","setGameOver","gameStart","setGameStart","top","left","targetPosition","setTargetPosition","loading","setLoading","score","setScore","previousScore","setPreviousScore","timerId","setTimerId","useLocation","display","alert","clearInterval","startGame","event","result","setInterval","submitScore","id","position","Math","floor","random","nearInitPromise","initContract","then","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename","path","element","catch","error"],"mappings":"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","file":"static/js/main.f56e21a1.chunk.js","sourcesContent":["const CONTRACT_NAME =\n  process.env.CONTRACT_NAME || \"mycontract.myaccount8.testnet\";\n\nfunction environment(env) {\n  switch (env) {\n    case \"mainnet\": // line 5\n      return {\n        networkId: \"mainnet\",\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        contractName: CONTRACT_NAME,\n        walletUrl: \"https://wallet.near.org\",\n        helperUrl: \"https://helper.mainnet.near.org\",\n        explorerUrl: \"https://explorer.mainnet.near.org\"\n      };\n    case \"testnet\": // line 14\n      return {\n        networkId: \"testnet\",\n        nodeUrl:\n          \"https://near-testnet-rpc.allthatnode.com:3030/behGuAmP10wnjj2EM0NmTHJTI84hZkBt\",\n        contractName: CONTRACT_NAME,\n        walletUrl: \"https://wallet.testnet.near.org/\",\n        helperUrl: \"https://helper.testnet.near.org\",\n        explorerUrl: \"https://explorer.testnet.near.org\"\n      };\n    default:\n      throw Error(`Unknown environment '${env}'.`);\n  }\n}\n\nexport default environment;\n","import environment from \"./config\";\nimport { connect, Contract, keyStores, WalletConnection } from \"near-api-js\";\nimport { formatNearAmount } from \"near-api-js/lib/utils/format\";\n\nconst nearEnv = environment(\"testnet\");\n\nexport async function initContract() {\n  // connect to NEAR\n  const near = await connect(\n    Object.assign(\n      {\n        deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() }\n      },\n      nearEnv\n    )\n  );\n  // create wallet connection\n  window.walletConnection = new WalletConnection(near);\n\n  window.accountId = window.walletConnection.getAccountId();\n\n  // window.account = await near.account(window.accountId);\n\n  window.contract = await new Contract(\n    window.walletConnection.account(),\n    nearEnv.contractName,\n    {\n      viewMethods: [\"get_num\"],\n      changeMethods: [\"increment\", \"reset\"]\n    }\n  );\n}\n\nexport async function get_num() {\n  let count = await window.contract.get_num({ args: {} });\n  return count;\n}\n\nexport async function increment(count) {\n  return await window.contract.increment({ args: { count: count } });\n}\n\nexport async function reset() {\n  return await window.contract.reset({ args: {} });\n}\n\nexport function logout() {\n  window.walletConnection.signOut();\n  // reload page\n  window.location.reload();\n}\n\nexport function login() {\n  // Allow the current app to make calls to the specified contract on the\n  // user's behalf.\n  // This works by creating a new access key for the user's account and storing\n  // the private key in localStorage.\n  window.walletConnection.requestSignIn(nearEnv.contractName);\n}\n\nexport async function accountBalance() {\n  return formatNearAmount(\n    (await window.walletConnection.account().getAccountBalance()).total,\n    2\n  );\n}\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { login, logout, accountBalance, get_num } from \"./near/utils\";\n\nfunction App() {\n  // const account = window.walletConnection.account();\n  const account = window.accountId;\n  const [balance, setBalance] = useState();\n  const [visible, setVisible] = useState(\"hidden\");\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    console.log(visible);\n    if (account) {\n      getBalance();\n      setVisible(\"visible\");\n    }\n  }, [account]);\n\n  const getBalance = async () => {\n    setBalance(await accountBalance());\n  };\n\n  const disconnect = () => {\n    logout();\n    setBalance();\n    setVisible(\"hidden\");\n  };\n\n  // 네트워크 별로 chainId에 따라서 DISCONNECT와 CONNECT 버튼이 나타나도록 구현\n  const renderBtn = () => {\n    if (account) {\n      return (\n        <button type=\"button\" onClick={logout} className=\"disconnect-btn\">\n          DISCONNECT\n        </button>\n      );\n    }\n    return (\n      <button type=\"button\" onClick={login} className=\"connect-btn\">\n        CONNECT WALLET\n      </button>\n    );\n  };\n\n  // 지갑과 연결되어 있으면 address와 balance 정보 출력\n  const showWalletInfo = () => {\n    if (account) {\n      return (\n        <div className=\"wallet-info\">\n          <p>{`address: ${account}`}</p>\n          <p>{`balance: ${balance} NEAR`}</p>\n        </div>\n      );\n    }\n  };\n\n  // PLAY 버튼 클릭하면 /play 주소로 이동\n  const playGame = () => {\n    return (\n      <div className=\"menu\">\n        <button\n          className=\"play-btn\"\n          onClick={() => {\n            navigate(\"/play\", {\n              state: {}\n            });\n          }}\n          style={{ visibility: visible }}\n        >\n          <span>PLAY</span>\n        </button>\n        {!account && <p>Choose your network and Connect wallet</p>}\n        {account && (\n          <p>Click as many NEAR Icon as you can within 15 seconds!</p>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"header-titles\">\n          <img\n            alt=\"NEAR Logo\"\n            className=\"near-logo\"\n            src={process.env.PUBLIC_URL + \"/near_logo.svg\"}\n            width=\"500\"\n          />\n          <h1>Clicker Game</h1>\n        </div>\n      </header>\n      <div className=\"App-container\">\n        <div className=\"App-menu-container\">\n          {playGame()}\n          <div className=\"connect-wallet\">{renderBtn()}</div>\n        </div>\n        {showWalletInfo()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { increment, reset, get_num } from \"../near/utils\";\n\nconst Play = () => {\n  // 플레이 시간\n  const playTime = 15;\n  // 플레이 시간\n  const [time, setTime] = useState(playTime);\n  // 게임 오버 여부\n  const [gameOver, setGameOver] = useState(false);\n  // 게임 시작 여부\n  const [gameStart, setGameStart] = useState(false);\n  // 아이콘의 위치 정보\n  const [targetPosition, setTargetPosition] = useState({\n    top: \"20%\",\n    left: \"50%\"\n  });\n  // 로딩 중인지 여부\n  const [loading, setLoading] = useState(false);\n  // 현재 점수\n  const [score, setScore] = useState(0);\n  // 컨트랙트에 저장된 이전 점수\n  const [previousScore, setPreviousScore] = useState(0);\n  // client\n  const [client, setClient] = useState();\n  // setInterval이 리턴하는 timerId 값 저장\n  const [timerId, setTimerId] = useState();\n  const location = useLocation();\n\n  // time이 변하는 것을 감지하여 0이 될때 게임 종료\n  useEffect(() => {\n    if (time === 0) {\n      // 아이콘이 보이지 않도록 설정\n      setTargetPosition({ display: \"none\" });\n      // 게임 종료 알람창\n      alert(\n        `Game Over! Your score is ${score}. Please confirm transaction to submit score.`\n      );\n      // setInterval 함수 중지\n      clearInterval(timerId);\n      setGameOver(true);\n      setGameStart(false);\n    }\n  }, [time]);\n\n  // Game Start 버튼 눌렀을 때 실행\n  const startGame = async (event) => {\n    // 컨트랙트와 통신하는 동안 loading 상태를 true로 설정\n    setLoading(true);\n    // get_count 쿼리 실행\n    const result = await get_num();\n    console.log(result);\n    // preiousScore에 읽어온 count 값 저장\n    setPreviousScore(result);\n    // reset 트랜잭션 실행해서 컨트랙트의 count 값을 0으로 초기화\n    await reset();\n    // 컨트랙트와 통신이 끝난 후 loading 상태를 false로 설정\n    setLoading(false);\n    // gameStart 를 true로 설정하여 게임 시작하기\n    setGameStart(true);\n    // 아이콘이 나타나도록 위치 설정\n    setTargetPosition({ top: \"20%\", left: \"50%\" });\n    // setInterval 메소드를 이용해 1초마다 time이 1씩 줄어들도록 설정\n    setTimerId(\n      setInterval(() => {\n        setTime((time) => (time > 0 ? time - 1 : 0));\n      }, 1000)\n    );\n  };\n\n  // Transaction 버튼을 눌렀을 때 실행\n  const submitScore = async (event) => {\n    // 컨트랙트와 통신하는 동안 loading 상태를 true로 설정\n    setLoading(true);\n    // 사용자가 얻은 점수(score) 만큼 increment 트랜잭션 실행해서 컨트랙트의 count 값을 score로 바꾸기\n    await increment(score);\n    // 현재 점수 0으로 초기화\n    setScore(0);\n    // get_count 쿼리를 통해 컨트랙트에 저장된 count 값을 읽어와서 Previous Score에 업데이트\n    const result = await get_num();\n    setPreviousScore(result);\n    // 컨트랙트와 통신이 끝난 후 loading 상태를 false로 설정\n    setLoading(false);\n    // 게임을 다시 시작할 수 있도록 설정\n    setGameOver(false);\n    setTime(playTime);\n  };\n\n  // 게임이 시작되기 전에는 GAME START , 게임 오버된 후에는 TRANSACTION 버튼 보이도록\n  const renderButton = () => {\n    if (gameOver === false) {\n      return (\n        <button className=\"game-btn\" onClick={(event) => startGame(event)}>\n          GAME START\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"game-btn\" onClick={(event) => submitScore(event)}>\n          TRANSACTION\n        </button>\n      );\n    }\n  };\n\n  // CosmWasm 아이콘을 클릭했을 때 실행되는 함수\n  const handleClick = () => {\n    // 현재 점수가 +1 씩 증가\n    setScore((score) => score + 1);\n    // 아이콘의 다음 위치를 랜덤으로 설정\n    setTargetPosition({\n      top: `${Math.floor(Math.random() * 80 + 10)}%`,\n      left: `${Math.floor(Math.random() * 80) + 10}%`\n    });\n  };\n\n  return (\n    <div className=\"score-board-container\">\n      <div className=\"play-container\">\n        <div className=\"score-menu\">\n          <span>Previous Score: {previousScore}</span>\n          <span>Current Score: {score}</span>\n        </div>\n        {renderButton()}\n        <span>Time left: {time} s</span>\n      </div>\n\n      <div className=\"game-container\">\n        {/* <img src=\"/Background.svg\" alt=\"background\" id=\"background\"></img> */}\n        {gameStart && (\n          <img\n            src={process.env.PUBLIC_URL + \"/near-mark.svg\"}\n            alt=\"Target\"\n            id=\"target\"\n            style={{ position: \"absolute\", ...targetPosition }}\n            onClick={handleClick}\n          />\n        )}\n        {loading && <div className=\"loading-msg\">Loading...</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Play;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { Route, Routes, BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Play from \"./pages/play\";\nimport { initContract, get_num } from \"./near/utils\";\n\nwindow.nearInitPromise = initContract()\n  .then(() => {\n    get_num().then(console.log);\n    const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n    root.render(\n      <React.StrictMode>\n        <div className=\"App-header\">\n          <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Routes>\n              <Route path=\"/\" element={<App />} />\n              <Route path=\"/play\" element={<Play />} />\n            </Routes>\n          </BrowserRouter>\n\n          <div className=\"footer-container\">\n            <span>Made with</span>\n            <img\n              src={process.env.PUBLIC_URL + \"/dsrv.png\"}\n              id=\"footer-logo\"\n              alt=\"dsrv-logo\"\n            ></img>\n          </div>\n        </div>\n      </React.StrictMode>\n    );\n  })\n  .catch(console.error);\n"],"sourceRoot":""}